# Copyright 2009-2016 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Source .c file
set source "multi-arch-tls.c"

# Archives with arch specific test files
set archive "multi-arch-tls"
set archive-2.22 "multi-arch-tls-2.22.tar.gz"

# List of supported architectures
set archs [list "x86_64" "armv7-hf" "mips" "aarch64" "powerpc"]

# List of glibc versions tested
set glibcs [list "2.19" "2.22"]

# Multiarch GDB works only if host architecture is x86 or x86_64
if ![istarget *x86_64*-*-*] {
    unsupported "Host architecture is not supported. Multi-arch GDB works only on x86 or x86_64"
    return -1
}

# Linux shell commands used, so linux is necessary
if ![istarget *-*linux*-*] {
    unsupported "OS not supported. Must be linux because of linux shell commands usage"
    return -1
}

# Test start
foreach {version} $glibcs {

    exec rm -rf [standard_output_file ""]/${version}
    exec mkdir [standard_output_file ""]/${version}
    exec tar -xzvf ${srcdir}/${subdir}/${archive}-${version}.tar.gz -C [standard_output_file ""]/${version}

    set ::env(LD_LIBRARY_PATH) [standard_output_file ""]/${version}/x86_64-nptl-libs

    foreach {arch} $archs {

        gdb_start
        gdb_reinitialize_dir $srcdir/$subdir

        gdb_test_no_output "set solib-search-path [standard_output_file ""]/${version}/${arch}"

        gdb_test "file [standard_output_file ""]/${version}/${arch}/${arch}-exe" \
                    "Reading symbols from [standard_output_file ""]/${version}/${arch}/${arch}-exe...done.*" \
                    "Loading exe file [standard_output_file ""]/${version}/${arch}/${arch}-exe."

        gdb_test "target core [standard_output_file ""]/${version}/${arch}/${arch}-core" \
                    ".*Core was generated by .\./${arch}-exe\.*" \
                    "Loading core file [standard_output_file ""]/${version}/${arch}/${arch}-core."

        gdb_test "p/x foo" \
                    "\\$\[0-9]+ = 0xdeadbeef" \
                    "Printing thread-local storage variable."
        gdb_exit
    }
}